#!/bin/bash
# ******************************************************************************
# 
# Name:    vol
# Author:  Gabriel Gonzalez
# Email:   gabeg@bu.edu
# License: The MIT License (MIT)
# 
# Syntax: vol [-h|--help] [--display] [[-p|--print] <item>] [-i|--inc]
#         [-d|--dec] [[-m|--mute] <channel>] [--on] [--off] [-r|--reset]
#         [<value>]
# 
# Description: Display information on the system volume level.
# 
# Notes: None.
# 
# **********************************************************************************

# Program information
ARGV=("$@")
PROG=`basename $0`

# Volume variables
DELTA=5
CHANNELS=("Master" "Headphone" "Speaker")

# ******************************************************************************
# Print program usage
usage()
{
    echo "Usage: ${PROG} [options] [value]"
    echo
    echo 'Options:'
    echo '    -h, --help                     Print program usage.'
    echo '    -p, --print [<channel>]        Print the volume level of one or all channels.'
    echo '    -i, --inc [<channel>]          Increment the volume level of one or all channels by 5%.'
    echo '    -d, --dec [<channel>]          Decrement the volume level of one or all channels by 5%.'
    echo '    -m, --mute [<channel>]         Toggle mute for one or all channels.'
    echo '    -s, --set <value> [channel]    Set the volume level of one or all channels [0-100]'
    echo '    -l, --list                     List all volume channels.'
    echo
    echo 'Names:'
    echo '    <channel>    The name of a volume channel.'
}

# ******************************************************************************
# Print volume for all volume channels, or the specified volume channel
print_volume()
{
    input=`str_to_cap "$1"`
    if [ -z "${input}" ]; then
        channels=("${CHANNELS[@]}")
    else
        if [ `is_channel "${channel}"` == false ]; then
            return
        fi
        channels=("${input}")
    fi

    for chan in "${channels[@]}"; do
        print_volume_channel "${chan}"
    done
}

# ******************************************************************************
# Print volume channel
print_volume_channel()
{
    local IFS=$'-'
    playback=(`amixer get "$1" \
                   | grep --color=never 'Playback channels' \
                   | sed 's/^.*.: //'`)
    for i in "${playback[@]}"; do 
        name=`echo "${i}" \
                  | sed 's/^ //; s/ $//'`
        channel=`amixer get "$1" \
                     | grep "${name}:"`
        vol=`echo "${channel}" \
                 | cut -f2 -d'[' \
                 | cut -f1 -d'%'`
        status=`echo "${channel}" \
                    | grep -m 1 -o "\[off\]\|\[on\]" \
                    | tr '[' '\0' \
                    | tr ']' '\0'`
        echo "$1: ${vol}% - ${name} [${status}]"
    done
}

# ******************************************************************************
# Increment/decrement volume level
step_volume_level()
{
    step="$1"
    input=`str_to_cap "$2"`
    if [ -z "${input}" ]; then
        channels=("${CHANNELS[@]}")
    else
        if [ `is_channel "${channel}"` == false ]; then
            return
        fi
        channels=("${input}")
    fi

    for chan in "${channels[@]}"; do
        amixer -q set "${chan}" "${step}"
        print_volume_channel "${chan}"
    done
}

# ******************************************************************************
# Mute all volume channels or specified volume channel
mute_volume()
{
    input=`str_to_cap "$1"`
    if [ -z "${input}" ]; then
        channels=("${CHANNELS[@]}")
    else
        if [ `is_channel "${input}"` == false ]; then
            return
        fi
        channels=("${input}")
    fi

    for chan in "${channels[@]}"; do
        amixer -q set "${chan}" toggle 
        print_volume_channel "${chan}"
    done
}

# ******************************************************************************
# Change system volume
set_volume()
{
    # Verify integer value was inputted
    value="$1"
    if [ -z "${value}" ]; then
        usage
        exit 1
    fi
    if [ "${value}" -eq "${value}" ] 2>/dev/null; then
        if [ "${value}" -ge 0 -a "${value}" -le 100 ]; then
            :
        else
            echo "${PROG_NAME}: Incorrect value entered: Value must be between 0-100."
            exit 1
        fi
    else
        usage
        exit 1
    fi

    # Check input chanel
    input=`str_to_cap "$2"`
    if [ -z "${input}" ]; then
        channels=("${CHANNELS[@]}")
    else
        if [ `is_channel "${input}"` == false ]; then
            return
        fi
        channels=("${input}")
    fi

    # Set volume
    for chan in "${channels[@]}"; do
        amixer -q sset "${chan}" "${value}%"
        print_volume_channel "${chan}"
    done
}

# ******************************************************************************
# List volume channels
list_volume_channels()
{
    echo -n 'Channels: '
    flag=0
    for chan in "${CHANNELS[@]}"; do
        if [ ${flag} -eq 0 ]; then
            echo -n "${chan}"
        else
            echo -n ", ${chan}"
        fi
        flag=1
    done
    echo
}

# ******************************************************************************
# Redefine default global volume channels in case some are not available
set_global_volume_channels()
{
    i=0
    for chan in "${CHANNELS[@]}"; do
        if [ `is_channel "${chan}"` == false ]; then
            unset CHANNELS[$i]
        fi
        i=$[ ${i} + 1 ]
    done
    CHANNELS=(${CHANNELS[@]})
}

# ******************************************************************************
# Check if command exists on system
check_command()
{
    exist=`hash "$1" 2>&1`
    if [ ! -z "${exist}" ]; then
        echo "${PROG_NAME}: Program '$1' does not exist. Please install it and try again."
        exit 1
    fi
}

# ******************************************************************************
# Convert string to capitalize first letter and lowercase all other letters
str_to_cap()
{
    if [ -z "$1" ]; then
        return
    fi
    start_letter=`echo "${1:0:1}" | tr '[a-z]' '[A-Z]'`
    rest_letters=`echo "${1:1}" | tr '[A-Z]' '[a-z]'`
    echo "${start_letter}${rest_letters}"
}

# ******************************************************************************
# Check if channel exists
is_channel()
{
    exist=`amixer | grep 'control' | grep "$1"`
    if [ -z "${exist}" ] || [ -z "$1" ]; then
        echo false
    else
        echo true
    fi
}

# ******************************************************************************
## Control system volume
main()
{
    # Parse command line arguments
    check_command 'amixer'
    set_global_volume_channels
    case "${ARGV[0]}" in
        # Print program usage
        ''|'-h'|'--help')
            usage
            exit 0
            ;;
        # Print current volume level
        '-p'|'--print')
            print_volume "${ARGV[1]}"
            ;;
        # Increment/decrement the volume
        '-i'|'--inc')
            step_volume_level ${DELTA}%+ "${ARGV[1]}"
            ;;
        '-d'|'--dec')
            step_volume_level ${DELTA}%- "${ARGV[1]}"
            ;;
        # Toggle mute 
        '-m'|'--mute')
            mute_volume "${ARGV[1]}"
            ;;
        # Set the volume level
        '-s'|'--set')
            set_volume "${ARGV[1]}" "${ARGV[2]}"
            ;;
        # List volume channels
        '-l'|'--list')
            list_volume_channels
            ;;
        *)
            usage
            exit 1
            ;;
    esac
}

# ******************************************************************************
## Execute volume control
main
