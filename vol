#!/bin/bash
# ------------------------------------------------------------------------------
# 
# File: vol
# Author: Gabriel Gonzalez
# 
# Brief: Control and display the system volume.
# 
# ------------------------------------------------------------------------------

##
# Source utilities.
##
. "commandline.sh"
. "io.sh"

# Globals
PROG="${0##*/}"
PROGDIR=$(dirname "$(readlink -f "${0}")")
DEFAULTCONTROLS=("Master" "Headphone" "Speaker")

##
# Options.
##
VERBOSE=

##
# Exit statuses.
##
EXIT_VOLUME_INVALID_VALUE=10
STATUS_NORMAL=0
STATUS_GETOPT=1
STATUS_ARGS=2
STATUS_CONTROL=10
STATUS_SETVAL=11


##
# Control volume.
##
main()
{
    cli_options "-h|--help|Print program usage." \
                "-v|--verbose|Verbose output." \
                "-c|--control=control:|A volume control to act on. [Default: Master]." \
                "-d|--decrement|Decrement the volume level by the amount set by '-D'." \
                "-i|--increment|Increment the volume level by the amount set by '-D'." \
                "-l|--list|List all the volume controls." \
                "-m|--mute|Toggle mute." \
                "-s|--set=value:|Set the volume to the desired level. [Range: 0 - 100]." \
                "-D|--delta=value:|Set the amount to increment/decrement the volume. [Default: 5]." \
                "-S|--status|Print the mute status."
    if [ $# -eq 0 ]
    then
        volume_print "Master"
        exit $?
    else
        cli_parse "${@}"
    fi

    local help=$(cli_get "help")
    local control=$(cli_get "control")
    local decrement=$(cli_get "decrement")
    local increment=$(cli_get "increment")
    local list=$(cli_get "list")
    local mute=$(cli_get "mute")
    local setvalue=$(cli_get "set")
    local delta=$(cli_get "delta")
    local status=$(cli_get "status")

    if [ -z "${control}" ]
    then
        control="Master"
    fi
    if [ -z "${delta}" ]
    then
        delta=5
    fi

    if [ -n "${help}" ]
    then
        cli_usage
    elif [ -n "${setvalue}" ]
    then
        volume_set "${control}" "${setvalue}"
    elif [ -n "${increment}" ]
    then
        volume_increment "${control}" "${delta}"
    elif [ -n "${decrement}" ]
    then
        volume_decrement "${control}" "${delta}"
    elif [ -n "${list}" ]
    then
        volume_list_controls
    elif [ -n "${mute}" ]
    then
        volume_mute_toggle
    elif [ -n "${status}" ]
    then
        volume_mute_status
    else
        :
    fi
    exit $?
}

##
# Print the current volume level.
##
volume_print()
{
    local control="${1}"
    local value="${2}"
    local volume=0
    local mute=$(volume_get_mute_status "${control}")
    if [ -n "${value}" ]
    then
        volume="${value}"
    else
        volume=$(volume_get_volume "${control}")
    fi
    if [ "${status}" == "off" ]
    then
        echo "${control} Volume: ${volume}%"
    else
        echo "${control} Volume: ${volume}% (Muted)"
    fi
}

##
# Set the volume level.
##
volume_set()
{
    local control="${1}"
    local value="${2/\%/}"
    local status=0
    volume_set_verify_value "${value}" || return $?
    amixer -q sset "${control}" "${value}%"
    status=$?
    volume_print "${control}" "${value}"
    return ${status}
}

##
# Increment the volume level.
##
volume_increment()
{
    local control="${1}"
    local delta="${2}"
    volume_delta "increment" "${control}" "${delta}"
    return $?
}

##
# Decrement the volume level.
##
volume_decrement()
{
    local control="${1}"
    local delta="${2}"
    volume_delta "decrement" "${control}" "${delta}"
    return $?
}

##
# Change the volume level by some delta amount.
##
volume_delta()
{
    local type="${1}"
    local control="${2}"
    local delta="${3}"
    local volume=$(volume_get_volume_normalized "${control}" "${delta}")
    volume_increment_verify_delta "${delta}" || return $?
    case "${type}" in
        increment) volume=$[ ${volume} + ${delta} ] ;;
        decrement) volume=$[ ${volume} - ${delta} ] ;;
        *) return 1 ;;
    esac
    volume_set "${control}" "${volume}"
    return $?
}

# ******************************************************************************
# Mute specified volume channel(s)
mute_volume()
{
    local channels=("${@}")
    for c in "${channels[@]}"; do
        amixer -q set "${c}" toggle 
        print_control_volume "${c}"
    done
}

# ******************************************************************************
# List volume channels
list_volume_controls()
{
    local first=true
    echo "Channels:"
    for c in "${DEFAULTCONTROLS[@]}"; do
        echo "* ${c}"
    done
}

# ******************************************************************************
# Print volume status
print_volume_status()
{
    local controls=("${@}")
    local status=
    for c in "${controls[@]}"; do
        status=off
        for s in $(volume_channel_get_mute_status "${c}"); do
            if [ "${s}" == "on" ]; then
                status="${s}"
                break
            fi
        done
        echo "${c}: ${status}"
    done
}

# ******************************************************************************
# Return average volume
get_average_volume()
{
    local control="${1}"

    # Calculate average volume
    sum=0
    num=0
    for val in $(volume_channel_get_volume "${control}"); do
        sum=$[ ${sum} + ${val} ]
        num=$[ ${num} + 1 ]
    done

    if [ ${num} -eq 0 ]; then
        echo 0
    else
        echo "$[ ${sum} / ${num} ]"
    fi
}

# ******************************************************************************
# Return average mute status
get_average_mute()
{
    local control="${1}"

    # Calculate average volume
    for status in $(volume_channel_get_mute_status "${control}"); do
        case "${status}" in
            on)
                echo on
                return
                ;;

            *) ;;
        esac
    done

    echo off
}

# ******************************************************************************
# Return specified channel(s)
get_control()
{
    local channel="${1}"

    # Determine which channel(s) to return
    case "${channel}" in
        all) echo "${DEFAULTCONTROLS[@]}" ;;
        *)
            channel=$(str_to_capital "${channel}")
            if is_control "${channel}"; then
                echo "${channel}"
            else
                print_err "Invalid channel specified."
                exit ${STATUS_CONTROL}
            fi
            ;;
    esac
}

##
# Return playback channel.
##
volume_channel_get_list()
{
    local control="${1}"
    amixer get "${control}" | grep 'Playback channels' \
        | sed -e 's/^.*.: //' -e 's/ - /\n/'
    return $?
}

##
# Return channel information.
##
volume_channel_get_info()
{
    local control="${1}"
    local channel="${2}"
    amixer get "${control}" | grep "${channel}:"
    return $?
}

##
# Return channel volume.
##
volume_channel_get_volume()
{
    local control="${1}"
    local channel="${2}"
    volume_channel_get_info  "${control}" "${channel}" \
        | sed 's/.*\[\(.*\)%\].*/\1/'
    return $?
}

##
# Return playback channel status.
##
volume_channel_get_mute_status()
{
    local control="${1}"
    local channel="${2}"
    volume_channel_get_info "${control}" "${channel}" \
        | sed 's/.*\[\(.*\)\]/\1/'
}

##
# Return the current volume level.
##
volume_get_volume()
{
    local IFS=$'\n'
    local control="${1}"
    local channels=($(volume_channel_get_list "${control}"))
    local volume=0
    local n=${#channels[@]}
    local c=
    for c in "${channels[@]}"
    do
        volume=$[ ${volume} + $(volume_channel_get_volume "${control}" "${c}") ]
    done
    if [ ${n} -eq 0 ]
    then
        echo 0
        return 1
    else
        echo $[ ${volume} / ${n} ]
        return 0
    fi
}

##
# Return the current normalized volume level, based on the delta volume.
##
volume_get_volume_normalized()
{
    local control="${1}"
    local delta="${2}"
    local volume=$(volume_get_volume "${control}")
    volume_increment_verify_delta "${delta}" || return $?
    echo $[ ${volume} - (${volume} % ${delta}) ]
    return 0
}

##
# Return the current mute status.
##
volume_get_mute_status()
{
    local IFS=$'\n'
    local control="${1}"
    local channels=($(volume_channel_get_list "${control}"))
    local mute="off"
    local c=
    for c in "${channels[@]}"
    do
        mute=$(volume_channel_get_mute_status "${control}" "${c}")
        if [ "${mute}" == "on" ]
        then
            break
        fi
    done
    echo "${mute}"
    return 0
}

##
# Verify input value when setting volume.
##
volume_set_verify_value()
{
    local value="${1}"
    if ! is_integer "${value}"
    then
        print_err "Unable to set volume: Input value is not an integer."
        return ${EXIT_VOLUME_INVALID_VALUE}
    fi
    if [ ${value} -lt 0 -o ${value} -gt 100 ]
    then
        print_err "Unable to set volume: Value must be between 0-100."
        return ${EXIT_VOLUME_INVALID_VALUE}
    fi
    return 0
}

##
# Verify input delta when incrementing the volume.
##
volume_increment_verify_delta()
{
    local delta="${1}"
    if ! is_integer "${delta}"
    then
        print_err "Unable to increment volume: Input delta is not an integer."
        return ${EXIT_VOLUME_INVALID_DELTA}
    fi
    return 0
}

# ******************************************************************************
# Check if control exists
is_control()
{
    local channel="${1}"
    if [ -z "${channel}" ]; then
        return 1
    fi

    local exists=$(amixer | grep "control" | grep "${channel}")
    if [ -z "${exists}" ]; then
        return 1
    fi
    return 0
}

##
# Run script.
##
main "${@}"
