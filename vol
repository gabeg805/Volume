#!/bin/bash
# ------------------------------------------------------------------------------
# 
# File: vol
# Author: Gabriel Gonzalez
# 
# Brief: Control and print the system volume.
# 
# ------------------------------------------------------------------------------

##
# Program name.
##
PROJECT="${0##*/}"

##
# Options.
##
CONTROL="Master"
DECREMENT=
INCREMENT=
LIST=
MUTE=
SET=
DELTA=5
STATUS=
SHORT=

##
# Exit statuses.
##
EXIT_NO_OPT_ENTERED=10
EXIT_VOLUME_INVALID_CONTROL=11
EXIT_VOLUME_INVALID_VALUE=12

##
# Control volume.
##
main()
{
    if [ $# -eq 0 ]
    then
        volume_print "Master"
        exit $?
    fi

	# Options
    local short="hc:dils:D:mMS"
    local long="help,control:,decrement,increment,list,set:,delta:,mute,status,short"
	local args=

    # Parse options
    args=$(getopt -o "${short}" --long "${long}" --name "${PROJECT}" \
				-- "${@}")
    if [ $? -ne 0 ]
    then
        usage
        exit 1
    fi
    eval set -- "${args}"

    while true
    do
        case "${1}" in
            -h|--help)
                usage
                exit 0
                ;;
            -c|--control)
                shift
                CONTROL="${1}"
                ;;
            -d|--decrement)
                DECREMENT=true
                ;;
            -i|--increment)
                INCREMENT=true
                ;;
            -l|--list)
                LIST=true
                ;;
            -s|--set)
                shift
                SET="${1}"
                ;;
            -D|--delta)
                shift
                DELTA="${1}"
                ;;
            -m|--mute)
                MUTE=true
                ;;
            -M|--status)
                STATUS=true
                ;;
            -S|--short)
                SHORT=true
                ;;
            *)
                break
                ;;
        esac
        shift
    done

    # Run checks
    if ! volume_is_control "${CONTROL}"
    then
        echo "${PROJECT}: Invalid control '${CONTROL}'." 1>&2
        return ${EXIT_VOLUME_INVALID_CONTROL}
    fi

    # Run options
    if [ -n "${DECREMENT}" ]
    then
        volume_decrement "${CONTROL}" "${DELTA}"
    elif [ -n "${INCREMENT}" ]
    then
        volume_increment "${CONTROL}" "${DELTA}"
    elif [ -n "${LIST}" ]
    then
        volume_list_controls
    elif [ -n "${SET}" ]
    then
        volume_set "${CONTROL}" "${SET}"
    elif [ -n "${MUTE}" ]
    then
        volume_mute_toggle "${CONTROL}"
    elif [ -n "${STATUS}" ]
    then
        volume_mute_status "${CONTROL}"
    else
        volume_print "${CONTROL}"
    fi

    return $?
}

##
# Print program usage.
##
usage()
{
    echo "Usage: ${PROJECT} [options]"
    echo 
    echo "Options:"
    echo "    -h, --help"
    echo "        Print program usage."
    echo 
    echo "    -c, --control=<control>"
    echo "        A volume control to act on. [Default: Master]."
    echo 
    echo "    -d, --decrement"
    echo "        Decrement the volume level by the amount set by '-D'."
    echo 
    echo "    -i, --increment"
    echo "        Increment the volume level by the amount set by '-D'."
    echo 
    echo "    -l, --list"
    echo "        List all the volume controls."
    echo 
    echo "    -s, --set=<value>"
    echo "        Set the volume to the desired level. [Range: 0 - 100]."
    echo 
    echo "    -D, --delta=<value>"
    echo "        Set the amount to increment/decrement the volume. [Default: 5]."
    echo 
    echo "    -m, --mute"
    echo "        Toggle mute."
    echo 
    echo "    -M, --status"
    echo "        Print the mute status."
    echo 
    echo "    -S, --short"
    echo "        Print the short form of the volume level."
    echo 
    echo "Arguments:"
    echo "    <control>"
    echo "        A mixer control."
    echo 
    echo "    <value>"
    echo "        An integer value."
}

##
# Print the current volume level.
##
volume_print()
{
    local control="${1}"
    local value="${2}"
    local volume=0
    local status=$(volume_get_mute_status "${control}")
	local msg=

	if [ -n "${value}" ]
    then
        volume="${value}%"
    else
        volume="$(volume_get_volume "${control}")%"
    fi

	if [ -z "${SHORT}" ]
	then
		msg="Volume: ${volume}"
	else
		msg="${volume}"
	fi

    if [ "${status}" != "off" ]
    then
        msg+=" (Muted)"
    fi

	echo "${msg}"
}

##
# Set the volume level.
##
volume_set()
{
    local control="${1}"
    local value="${2/\%/}"
    local status=0
    volume_set_verify_value "${value}" || return $?
    amixer -q sset "${control}" "${value}%"
    status=$?
    volume_print "${control}" "${value}"
    return ${status}
}

##
# Decrement the volume level.
##
volume_decrement()
{
    local control="${1}"
    local delta="${2}"
    volume_delta "decrement" "${control}" "${delta}"
    return $?
}

##
# Increment the volume level.
##
volume_increment()
{
    local control="${1}"
    local delta="${2}"
    volume_delta "increment" "${control}" "${delta}"
    return $?
}

##
# Change the volume level by some delta amount.
##
volume_delta()
{
    local type="${1}"
    local control="${2}"
    local delta="${3}"
    local volume=$(volume_get_volume_normalized "${control}" "${delta}")
    volume_increment_verify_delta "${delta}" || return $?
    case "${type}" in
        increment) volume=$[ ${volume} + ${delta} ] ;;
        decrement) volume=$[ ${volume} - ${delta} ] ;;
        *) return 1 ;;
    esac
    volume_set "${control}" "${volume}"
    return $?
}

##
# List all the available volume controls.
##
volume_list_controls()
{
    amixer | grep -o "^Simple mixer control '.*'" \
        | sed "s/^Simple mixer control '//; s/'//"
    return $?
}

##
# Toggle mute.
##
volume_mute_toggle()
{
    local control="${1}"
    amixer -q set "${control}" toggle 
    volume_print "${control}"
}

##
# Volume mute status.
##
volume_mute_status()
{
    local control="${1}"
    local status=$(volume_get_mute_status "${control}")
    echo "Mute: ${status}"
}

##
# Return the current volume level.
##
volume_get_volume()
{
    local IFS=$'\n'
    local control="${1}"
    local channels=($(volume_channel_get_list "${control}"))
    local volume=0
    local n=${#channels[@]}
    local c=
    for c in "${channels[@]}"
    do
        volume=$[ ${volume} + $(volume_channel_get_volume "${control}" "${c}") ]
    done
    if [ ${n} -eq 0 ]
    then
        echo 0
        return 1
    else
        echo $[ ${volume} / ${n} ]
        return 0
    fi
}

##
# Return the current normalized volume level, based on the delta volume.
##
volume_get_volume_normalized()
{
    local control="${1}"
    local delta="${2}"
    local volume=$(volume_get_volume "${control}")
    volume_increment_verify_delta "${delta}" || return $?
    echo $[ ${volume} - (${volume} % ${delta}) ]
    return 0
}

##
# Return playback channel.
##
volume_channel_get_list()
{
    local control="${1}"
    amixer get "${control}" | grep 'Playback channels' \
        | sed -e 's/^.*.: //' -e 's/ - /\n/'
    return $?
}

##
# Return channel information.
##
volume_channel_get_info()
{
    local control="${1}"
    local channel="${2}"
    amixer get "${control}" | grep "${channel}:"
    return $?
}

##
# Return channel volume.
##
volume_channel_get_volume()
{
    local control="${1}"
    local channel="${2}"
    volume_channel_get_info  "${control}" "${channel}" \
        | sed 's/.*\[\(.*\)%\].*/\1/'
    return $?
}

##
# Return playback channel status.
##
volume_channel_get_mute_status()
{
    local control="${1}"
    local channel="${2}"
    volume_channel_get_info "${control}" "${channel}" \
        | sed 's/.*\[\(.*\)\]/\1/'
}

##
# Return the current mute status.
##
volume_get_mute_status()
{
    local IFS=$'\n'
    local control="${1}"
    local channels=($(volume_channel_get_list "${control}"))
    local status="off"
    local c=
    for c in "${channels[@]}"
    do
        status=$(volume_channel_get_mute_status "${control}" "${c}")
        if [ "${status}" == "on" ]
        then
            status="off"
        else
            status="on"
            break
        fi
    done
    echo "${status}"
    return 0
}

##
# Verify input value when setting volume.
##
volume_set_verify_value()
{
    local value="${1}"
    if [ "${value}" -eq "${value}" ] 2> /dev/null
    then
        :
    else
        echo "${PROJECT}: Unable to set volume: Input value is not an integer." 1>&2
        return ${EXIT_VOLUME_INVALID_VALUE}
    fi
    if [ ${value} -lt 0 -o ${value} -gt 100 ]
    then
        echo "${PROJECT}: Unable to set volume: Value must be between 0-100." 1>&2
        return ${EXIT_VOLUME_INVALID_VALUE}
    fi
    return 0
}

##
# Verify input delta when incrementing the volume.
##
volume_increment_verify_delta()
{
    local delta="${1}"
    if [ "${delta}" -eq "${delta}" ] 2> /dev/null
    then
        :
    else
        echo "${PROJECT}: Unable to increment volume: Input delta is not an integer." 1>&2
        return ${EXIT_VOLUME_INVALID_DELTA}
    fi
    return 0
}

##
# Check if input is a valid control.
##
volume_is_control()
{
    local control="${1}"
    # local valid=("Master" "Headphone" "Speaker")
    local valid=($(volume_list_controls))
    for v in "${valid[@]}"
    do
        if [ "${control}" == "${v}" ]
        then
            return 0
        fi
    done
    return 1
}

##
# Run script.
##
main "${@}"
