#!/bin/bash
## 
## CONTRIBUTORS: 
## 
##     * Gabriel Gonzalez (gabeg@bu.edu) 
## 
## 
## LICENSE: 
## 
##     The MIT License (MIT)
## 
## 
## NAME:
## 
##     vol - Display and control the system volume.
## 
## 
## SYNTAX: 
## 
##     vol [-h] [-i|--inc] [-d|--dec] [-m|--mute] [--on] [--off] [-r|--reset] 
##         [--display] [<value>]
## 
## 
## PURPOSE:
## 
##     Display information on the system volume level.
## 
## 
## OPTIONS:
## 
##     -h
##         Print program usage.
## 
##     -i, --inc
##         Increment the volume by 5%.
## 
##     -d, --dec
##         Decrement the volume by 5%.
## 
##     -m, --mute
##         Toggle volume mute.
## 
##     --on
##         Turn the volume on all channels on.
## 
##     --off
##         Turn the volume on all channels off.
## 
##     -r, --reset
##         Reset the system volume by turning all channels on, setting Master to 
##         50%, and Headphone and Speaker to 100%.
## 
##     --display
##         Display a GUI noification, using "noti", that shows the volume level.
## 
## 
## FUNCTIONS:
## 
##     print_usage       - Print program usage.
## 
##     print_separator   - Print separator corresponding to number of chars in given 
##                         string.
##     print_volume      - Print current volume level.
##     print_volume_all  - Print volume for all channels.
## 
##     gui_display       - Display volume information using the GUI.
## 
##     toggle_mute       - Toggle mute for the specified channel.
##     set_volume        - Set system volume.
##     set_volume_status - Turn the volume of all channels on/off.
## 
## 
## FILE STRUCTURE:
## 
##     * Print Program Usage
##     * Print Volume
##     * GUI Volume Notification
##     * Modify Volume Level
##     * Control System Volume 
## 
## 
## MODIFICATION HISTORY:
## 	
##     gabeg Jan 04 2015 <> Created.
## 
##     gabeg Jan 07 2015 <> Added the GUI notification display.
## 
## **********************************************************************************



## ================
## GLOBAL VARIABLES
## ================

## Program information
ARGV=("$@")
PROG_NAME=`basename $0`

## Increase/decrease in volume
DELTA=5

## Gui notification bubble
NOTIFY="noti"
NOTIFY_PATH=`hash "${NOTIFY}" 2>&1`



## ###############################
## ##### PRINT PROGRAM USAGE #####
## ###############################

## Print program usage
function print_usage {
    echo -e "Usage: ${PROG_NAME} [-h] [-i|--inc] [-d|--dec] [-m|--mute] [--on] [--off]" \
         "\n\t[-r|--reset] [--display] [<value>]"
    exit 1
}



## ########################
## ##### PRINT VOLUME #####
## ########################

## Print separator
function print_separator {
    len=`echo "$1" | wc -c`
    
    while [ ${len} -gt 1 ]; do 
        echo -n "="
        len=$[ ${len} - 1 ]
    done
    
    echo
}



## Print volume
function print_volume {
    
    ## Playback channels
    local IFS=$'-'
    local playback=(`amixer get "$1" \
                        | grep --color=never "Playback channels" \
                        | sed 's/^.*.: //'`)
    
    ## Channels
    print_separator "$1"
    echo "$1"
    print_separator "$1"
    
    for i in "${playback[@]}"; do 
        local name=`echo "${i}" \
                        | sed 's/^ //; s/ $//'`
        local channel=`amixer get "$1" \
                           | grep "${name}:"`
        local vol=`echo "${channel}" \
                       | cut -f2 -d'[' \
                       | cut -f1 -d'%'`
        local status=`echo "${channel}" \
                          | grep -m 1 -o "\[off\]\|\[on\]" \
                          | tr '[' '\0' \
                          | tr ']' '\0'`
        echo "Volume: ${vol}% - ${name} [${status}]"
    done
}



## Print all channels
function print_volume_all {
    print_volume "Master"
    echo
    print_volume "Headphone"
    echo
    print_volume "Speaker"
}



## ###################################
## ##### GUI VOLUME NOTIFICATION #####
## ###################################

## GUI notification for battery information
function gui_display {
    
    ## Check if notification program exists
    if [ ! -z ${NOTIFY_PATH} ]; then 
        echo "${PROG_NAME}: '${NOTIFY}' does not exist."
        exit 1
    fi
    
    ## Display current battery level
    ${NOTIFY} --time 5 -b "$(print_volume Master)" 
}



## ###############################
## ##### MODIFY VOLUME LEVEL #####
## ###############################

## Toggle mute
function toggle_mute {
    
    ## Channel to toggle
    channel=""
    
    case "${ARGV[1]}" in
        ""|"Master")
            channel="Master"
            ;;
        "Headphone")
            channel="Headphone"
            ;;
        "Speaker")
            channel="Speaker"
            ;;
    esac
    
    ## Toggle mute
    amixer -q set "${channel}" toggle
    print_volume "${channel}"
}



## Change system volume
function set_volume {    
    
    ## Verify integer value was inputted
    if [ "${ARGV[0]}" -eq "${ARGV[0]}" ] 2>/dev/null; then
        :
    else
        print_usage
    fi
    
    ## Check if input value is outside of limit range
    local input=${ARGV[0]}
    if [ ${input} -lt 0 ]; then
        input=0
    elif [ ${input} -gt 100 ]; then
        input=100
    fi
    
    ## Set the current volume level
    amixer -q cset iface=MIXER,name="Master Playback Volume" "${input}%"
    
    ## Display current volume
    print_volume "Master"
}



## Turn volume on/off
function set_volume_status {
    amixer -q set Master "$1"
    amixer -q set Headphone "$1"
    amixer -q set Speaker "$1"
}



## #################################
## ##### CONTROL SYSTEM VOLUME ##### 
## #################################

## Control system volume
function main {
    
    case "${ARGV[0]}" in
        
        ## Print program usage
        "-h")
            print_usage
            ;;
        
        ## Print current volume level
        "")
            print_volume_all
            ;;
        
        "-i"|"--inc")
            amixer -q set Master ${DELTA}%+
            print_volume "Master"
            ;;
        
        "-d"|"--dec")
            amixer -q set Master ${DELTA}%-
            print_volume "Master"
            ;;
        
        ## Toggle mute 
        "-m"|"--mute")
            toggle_mute 
            ;;
        
        ## Turn on/off volume
        "--on")
            set_volume_status "on"
            print_volume_all
            ;;
        
        "--off")
            set_volume_status "off"
            print_volume_all
            ;;
        
        ## Reset volume of everything to 50%
        "-r"|"--reset")
            set_volume_status "on"
            
            amixer -q set Master 50%
            amixer -q set Headphone 100%
            amixer -q set Speaker 100%
            
            print_volume_all
            ;;
        
        "--display")
            gui_display
            ;;
        
        ## Set the volume level
        *)
            set_volume
    esac
}



## Execute volume control
main
